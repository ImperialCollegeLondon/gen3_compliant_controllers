# Joint space compliant controller parameters

PACKAGE='gen3_compliant_controllers'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

kj = gen.add_group("Kj") # joint stiffness
kj.add("j_0", double_t, 0, "Joint 0 Stiffness",    4000, 2000,   9000)
kj.add("j_1", double_t, 0, "Joint 1 Stiffness",    4000, 2000,   9000)
kj.add("j_2", double_t, 0, "Joint 2 Stiffness",    4000, 2000,   9000)
kj.add("j_3", double_t, 0, "Joint 3 Stiffness",    4000, 2000,   9000)
kj.add("j_4", double_t, 0, "Joint 4 Stiffness",    3500, 2000,   9000)
kj.add("j_5", double_t, 0, "Joint 5 Stiffness",    3500, 2000,   9000)
kj.add("j_6", double_t, 0, "Joint 6 Stiffness",    3500, 2000,   9000)

b = gen.add_group("B") # rotor inertia values
b.add("b_0", double_t, 0, "Rotor inertia for joint 0",    0.3, 0.05,   0.5)
b.add("b_1", double_t, 0, "Rotor inertia for joint 1",    0.3, 0.05,   0.5)
b.add("b_2", double_t, 0, "Rotor inertia for joint 2",    0.3, 0.05,   0.5)
b.add("b_3", double_t, 0, "Rotor inertia for joint 3",    0.3, 0.05,   0.5)
b.add("b_4", double_t, 0, "Rotor inertia for joint 4",    0.18, 0.05,   0.5)
b.add("b_5", double_t, 0, "Rotor inertia for joint 5",    0.18, 0.05,   0.5)
b.add("b_6", double_t, 0, "Rotor inertia for joint 6",    0.18, 0.05,   0.5)

kp = gen.add_group("Kp") # stiffness gain
kp.add("k_0", double_t, 0, "Stiffness Gain for joint 0",    20, 10,   100)
kp.add("k_1", double_t, 0, "Stiffness Gain for joint 1",    20, 10,   100)
kp.add("k_2", double_t, 0, "Stiffness Gain for joint 2",    20, 10,   100)
kp.add("k_3", double_t, 0, "Stiffness Gain for joint 3",    20, 10,   100)
kp.add("k_4", double_t, 0, "Stiffness Gain for joint 4",    10, 5, 80)
kp.add("k_5", double_t, 0, "Stiffness Gain for joint 5",    10, 5, 80)
kp.add("k_6", double_t, 0, "Stiffness Gain for joint 6",    10, 5, 80)

kd = gen.add_group("Kd") # damping gain
kd.add("d_0", double_t, 0, "Damping Gain for joint 0",    2, 1,   10)
kd.add("d_1", double_t, 0, "Damping Gain for joint 1",    2, 1,   10)
kd.add("d_2", double_t, 0, "Damping Gain for joint 2",    2, 1,   10)
kd.add("d_3", double_t, 0, "Damping Gain for joint 3",    2, 1,   10)
kd.add("d_4", double_t, 0, "Damping Gain for joint 4",    2, 1,   10)
kd.add("d_5", double_t, 0, "Damping Gain for joint 5",    2, 1,   10)
kd.add("d_6", double_t, 0, "Damping Gain for joint 6",    2, 1,   10)

l = gen.add_group("L") # friction observer proportional gain
l.add("l_0", double_t, 0, "Friction observer propotional gain for joint 0",    75, 20,   200)
l.add("l_1", double_t, 0, "Friction observer propotional gain for joint 1",    75, 20,   200)
l.add("l_2", double_t, 0, "Friction observer propotional gain for joint 2",    75, 20,   200)
l.add("l_3", double_t, 0, "Friction observer propotional gain for joint 3",    75, 20,   200)
l.add("l_4", double_t, 0, "Friction observer propotional gain for joint 4",    40, 20,   200)
l.add("l_5", double_t, 0, "Friction observer propotional gain for joint 5",    40, 20,   200)
l.add("l_6", double_t, 0, "Friction observer propotional gain for joint 6",    40, 20,   200)

lp = gen.add_group("Lp") # friction observer derivative gain
lp.add("lp_0", double_t, 0, "Friction observer derivative gain for joint 0",    5, 1,   30)
lp.add("lp_1", double_t, 0, "Friction observer derivative gain for joint 1",    5, 1,   30)
lp.add("lp_2", double_t, 0, "Friction observer derivative gain for joint 2",    5, 1,   30)
lp.add("lp_3", double_t, 0, "Friction observer derivative gain for joint 3",    5, 1,   30)
lp.add("lp_4", double_t, 0, "Friction observer derivative gain for joint 4",    4, 1,   30)
lp.add("lp_5", double_t, 0, "Friction observer derivative gain for joint 5",    4, 1,   30)
lp.add("lp_6", double_t, 0, "Friction observer derivative gain for joint 6",    4, 1,   30)

exit(gen.generate(PACKAGE, "joint_space_compliance", "JointSpaceCompliantController"))
